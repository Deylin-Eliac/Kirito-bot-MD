import { jidNormalizedUser, jidDecode } from '@whiskeysockets/baileys'

let handler = async (m, { conn, args, usedPrefix, command }) => {
  // Une todos los argumentos para manejar n√∫meros con espacios
  const fullNumber = args.join('');
  
  if (!fullNumber) {
    return m.reply(`üìå Uso: ${usedPrefix + command} 50499999999`);
  }

  // Limpia el n√∫mero de entrada de cualquier caracter que no sea un d√≠gito
  const rawNumber = fullNumber.replace(/\D/g, '');
  
  // Ahora la longitud del n√∫mero ser√° la correcta
  if (rawNumber.length < 8) {
    return m.reply('‚ùå Por favor, ingresa un n√∫mero de tel√©fono v√°lido con c√≥digo de pa√≠s.');
  }
  
  // Normaliza el JID
  const jid = jidNormalizedUser(rawNumber + '@s.whatsapp.net');

  // Verifica si el n√∫mero existe en WhatsApp
  let exists = false;
  try {
    const results = await conn.onWhatsApp(rawNumber);
    if (results && results[0] && results[0].exists) {
      exists = true;
    }
  } catch (e) {
    console.error("Error al verificar la existencia del n√∫mero en WhatsApp:", e);
  }

  if (!exists) {
    return m.reply('‚ùå Ese n√∫mero no est√° en WhatsApp o no se pudo verificar.');
  }

  // Define variables para los datos del perfil
  let ppUrl = 'https://i.imgur.com/Qj4S7o7.png'; // URL por defecto para la foto de perfil no encontrada
  let name = 'No disponible';
  let statusText = 'No disponible';
  let businessInfo = null;

  // Obtiene los datos del perfil de forma segura
  try {
    ppUrl = await conn.profilePictureUrl(jid, 'image');
  } catch (e) { /* La URL por defecto se mantiene */ }
  
  try {
    name = await conn.getName(jid);
  } catch (e) { /* El nombre por defecto se mantiene */ }
  
  try {
    const status = await conn.fetchStatus(jid);
    if (status && status.status) {
      statusText = status.status;
    }
  } catch (e) { /* El estado por defecto se mantiene */ }

  // Intenta obtener el perfil de negocio (si la funci√≥n existe)
  try {
    if (typeof conn.getBusinessProfile === 'function') {
      businessInfo = await conn.getBusinessProfile(jid);
    }
  } catch (e) {
    console.error("Error al obtener el perfil de negocios:", e);
  }

  // Decodifica el JID para obtener informaci√≥n de dispositivo
  const d = jidDecode(jid) || {};
  const decodedLines = [];
  if (d.user) decodedLines.push(`‚Ä¢ Usuario: ${d.user}`);
  if (d.server) decodedLines.push(`‚Ä¢ Servidor: ${d.server}`);
  if (typeof d.device !== 'undefined') decodedLines.push(`‚Ä¢ Dispositivo: ${d.device === 0 ? 'Principal' : 'Compa√±ero'}`);

  // Construye el mensaje de respuesta
  const info = [
    `*INFORMACI√ìN DEL N√öMERO:*`,
    `> N√∫mero: ${rawNumber}`,
    `> JID: ${jid}`,
    `> Nombre: ${name}`,
    `> Estado: ${statusText}`,
    `> Foto de perfil: ${ppUrl !== 'https://i.imgur.com/Qj4S7o7.png' ? 'S√≠ ‚úÖ' : 'No ‚ùå'}`,
    businessInfo ? `> Cuenta Business: S√≠ ‚úÖ` : `> Cuenta Business: No detectado ‚ùå`,
    businessInfo?.description ? `> Descripci√≥n Business: ${businessInfo.description}` : '',
    businessInfo?.categories?.length ? `> Categor√≠as Business: ${businessInfo.categories.join(', ')}` : '',
    decodedLines.length ? `\n*JID Decodificado:*\n${decodedLines.map(l => `  ${l}`).join('\n')}` : '',
    `\n*üö® Nota:* Solo se muestra informaci√≥n p√∫blica. No se accede a datos privados como IP o ubicaci√≥n.`
  ].filter(Boolean).join('\n');

  // Env√≠a el mensaje y la foto de perfil
  await conn.sendMessage(m.chat, {
    image: { url: ppUrl },
    caption: info,
    contextInfo: {
      externalAdReply: {
        title: name,
        body: 'Informaci√≥n de WhatsApp',
        thumbnailUrl: ppUrl,
        sourceUrl: 'https://whatsapp.com'
      }
    }
  }, { quoted: m });
};

handler.help = ['whois <n√∫mero>']
handler.tags = ['herramientas']
handler.command = /^whois|info$/i

export default handler

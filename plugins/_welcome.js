import { WAMessageStubType, generateWAMessageFromContent, proto } from '@whiskeysockets/baileys'
import fetch from 'node-fetch'

const frasesBienvenida = [
  "Nos alegra tenerte con nosotros, disfruta tu estad√≠a",
  "Prep√°rate para compartir momentos incre√≠bles",
  "Bienvenido, que tu energ√≠a positiva contagie al grupo",
  "Que tu presencia haga este grupo m√°s fuerte",
  "Estamos felices de que te unas a nuestra comunidad",
  "Nuevo integrante, nuevas aventuras por vivir",
  "Tu participaci√≥n ser√° muy valiosa, bienvenido",
  "Esperamos que encuentres apoyo y diversi√≥n aqu√≠",
  "Que cada mensaje tuyo sume alegr√≠a al grupo",
  "Bienvenido, este es un espacio de colaboraci√≥n y respeto"
]

const frasesDespedida = [
  "Nos entristece verte partir, que te vaya bien",
  "Gracias por tu tiempo con nosotros, hasta luego",
  "Tu energ√≠a har√° falta, hasta pronto",
  "Que encuentres nuevos caminos llenos de √©xitos",
  "Esperamos verte de nuevo en otra ocasi√≥n",
  "Se va un miembro valioso, buen viaje",
  "Nos dejas un vac√≠o, cu√≠date mucho",
  "Hasta la pr√≥xima, que todo te vaya excelente",
  "Tu participaci√≥n siempre ser√° recordada",
  "Despedirse es dif√≠cil, pero los recuerdos quedan"
]

export async function before(m, { conn, participants, groupMetadata }) {
  if (!m.messageStubType || !m.isGroup) return true
  const who = m.messageStubParameters?.[0]
  if (!who) return

  const chat = global.db.data.chats[m.chat]
  if (!chat?.welcome) return

  const tipo = 
    m.messageStubType === WAMessageStubType.GROUP_PARTICIPANT_ADD ? 'Bienvenido üéâ' :
    (m.messageStubType === WAMessageStubType.GROUP_PARTICIPANT_LEAVE || m.messageStubType === WAMessageStubType.GROUP_PARTICIPANT_REMOVE) ? 'Despedida üëã' :
    null

  if (!tipo) return

  const frase = tipo.includes('Bienvenido')
    ? frasesBienvenida[Math.floor(Math.random() * frasesBienvenida.length)]
    : frasesDespedida[Math.floor(Math.random() * frasesDespedida.length)]

  const taguser = `@${who.split('@')[0]}`
  const total = participants.length
  const grupo = groupMetadata.subject
  const date = new Date().toLocaleString('es-ES', { timeZone: 'America/Mexico_City' })

  let avatar
  try {
    avatar = await conn.profilePictureUrl(who, 'image')
  } catch {
    avatar = 'https://i.postimg.cc/Gm9jRysW/default-avatar.png'
  }

  const fondo = tipo.includes('Bienvenido')
    ? 'https://i.postimg.cc/0yGwZ9Gy/welcome-bg.jpg'
    : 'https://i.postimg.cc/BvccvPC8/bye-bg.jpg'

  const imgUrl = `https://canvas-8zhi.onrender.com/api/welcome3?title=${encodeURIComponent(tipo)}&desc=${encodeURIComponent(frase)}&profile=${encodeURIComponent(avatar)}&background=${encodeURIComponent(fondo)}`

  // Crear mensaje decorativo tipo template interactivo
  const templateMessage = generateWAMessageFromContent(m.chat, {
    viewOnceMessage: {
      message: {
        interactiveMessage: proto.Message.InteractiveMessage.create({
          header: {
            title: tipo,
            subtitle: grupo,
            hasMediaAttachment: true,
            ...(await conn.prepareMessageMedia({ image: { url: imgUrl } }, { upload: conn.waUploadToServer }))
          },
          body: {
            text: `‚ú∞ Usuario: ${taguser}\n‚úé Fecha: ${date}\n‚úé Miembros: ${total}`
          },
          footer: {
            text: "‚ú® Powered by Kirito-Bot-MD"
          },
          nativeFlowMessage: {
            buttons: [
              {
                name: "cta_copy",
                buttonParamsJson: JSON.stringify({
                  display_text: "üíñ Bienvenido",
                  copy_code: grupo
                })
              },
              {
                name: "cta_url",
                buttonParamsJson: JSON.stringify({
                  display_text: "üì¢ Canal Oficial",
                  url: "https://whatsapp.com/channel/0029VbB46nl2ER6dZac6Nd1o"
                })
              }
            ]
          },
          contextInfo: {
            mentionedJid: [who],
            externalAdReply: {
              title: tipo,
              body: frase,
              thumbnailUrl: imgUrl,
              sourceUrl: "https://deylin.xyz/",
              mediaType: 1,
              renderLargerThumbnail: true
            }
          }
        })
      }
    }
  }, {})

  await conn.relayMessage(m.chat, templateMessage.message, { messageId: templateMessage.key.id })
}